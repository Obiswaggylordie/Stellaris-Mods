namespace = composer

# PROMETHEAN COMPOSER
planet_event = {
	id = composer.1
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		
		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
		}

		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_assimilator days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_spiritualist
						AND = {
							is_country_type = default
							OR = {
								is_egalitarian = yes
								is_spiritualist = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_assimilated_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		owner = {
			if = {
				limit = { #isn't the case when the crisis bombards planets, for instance
					is_at_war_with = from.fleet.owner
				}
				add_static_war_exhaustion = {
					attacker = from.fleet.owner
					location = root
					value_for_planet_destruction = 1.0
				}
			}
		}
		if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			# already owned
		}
		else = {
			set_owner = from.owner
		}
		every_owned_pop = {
			limit = {
				is_valid_pop_for_PLANET_KILLER_COMPOSER = yes
			}
			create_species = {
				name = "Mechanical Promethean"
				plural = "Mechanical Prometheans"
				adjective = "Mechanical Promethean"
				namelist = promethean
				class = "ROBOT"
				portrait = promethean
				traits = {
					trait = "trait_mechanical"
					trait = "trait_robot_promethean_ai"
				}
			}
			change_species = last_created_species
		}
		every_owned_pop = {
			limit = {
				has_modifier = pop_recently_conquered
			}
			remove_modifier = pop_recently_conquered
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_nanobot_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_nanobot_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
				}
			}
			# nothing
		}
		else = {
			switch = {
				trigger = is_planet_class
				pc_desert = { change_pc = pc_desert }
				pc_arid = { change_pc = pc_arid }
				pc_savannah = { change_pc = pc_savannah }
				pc_ocean = { change_pc = pc_ocean }
				pc_continental = { change_pc = pc_continental }
				pc_tropical = { change_pc = pc_tropical }
				pc_tundra = { change_pc = pc_tundra }
				pc_arctic = { change_pc = pc_arctic }
				pc_alpine = { change_pc = pc_alpine }
			}
		}
		from.owner = {
			country_event = { id = composer.2 } 
		}
	}
}

country_event = {
	id = composer.2
	title = composer.2.name
	desc = composer.2.desc
	picture = GFX_evt_planet_composed
	show_sound = event_screams
	location = from

	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = fired_composer }
		FROM = {
			NOR = {
				is_planet_class = pc_habitat
				is_planet_class = pc_ringworld_habitable
			}
		}
	}

	immediate = {
		set_country_flag = fired_composer
	}

	option = {
		name = EXCELLENT
		from = {
			custom_tooltip = composer.2.tooltip
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier3researchreward
			min = @tier3researchmin
			max = @tier3researchmax
		}
	}
}